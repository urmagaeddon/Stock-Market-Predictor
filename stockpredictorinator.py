# -*- coding: utf-8 -*-
"""stockpredictorinator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EJla8iaDhTSN7UpLAMtqP-3eXAYCHYIO
"""

import yfinance as yf

sp500 = yf.Ticker("^GSPC")

sp500 = sp500.history(period="max")

sp500

sp500.index

sp500.plot.line(y="Close", use_index=True)

del sp500['Stock Splits']

sp500["Tomorrow"] = sp500["Close"].shift(-1)

sp500

sp500["Target"] = (sp500["Tomorrow"] > sp500["Close"]).astype(int)

sp500

sp500 = sp500.loc["1995-01-01":].copy()

sp500

"""# **START TRAINING**"""

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators=800, min_samples_split=100, random_state=1)

train = sp500.iloc[:-100]
test = sp500.iloc[-100:]

predictors = ["Open", "Close", "Volume", "High", "Low"]
model.fit(train[predictors], train["Target"])

from sklearn.metrics import precision_score
preds = model.predict(test[predictors])

import pandas as pd
preds = pd.Series(preds, index=test.index)
preds

precision_score(test["Target"], preds)

"""imperoving?"""

combined = pd.concat([test["Target"], preds], axis=1)
combined.plot()

def predict(train, test, predictors, model):
    model.fit(train[predictors], train["Target"])
    preds = model.predict(test[predictors])
    preds = pd.Series(preds, index=test.index, name="Predictions")
    combined = pd.concat([test["Target"], preds], axis=1)
    return combined

def backtest(data, model, predictors, start=2500, step=250):
    all_predictions = []

    for i in range(start, data.shape[0], step):
        train = data.iloc[0:i].copy()
        test = data.iloc[i:(i+step)].copy()
        predictions = predict(train, test, predictors, model)
        all_predictions.append(predictions)
    return pd.concat(all_predictions)

predictions = backtest(sp500, model, predictors)

predictions['Predictions'].value_counts()

precision_score(predictions['Target'], predictions['Predictions'])

predictions['Target'].value_counts() / predictions.shape[0]

"""Additional Predictors"""

from numbers import Rational
horizons = [2, 5, 60, 260, 1300]
new_predictors = []

for horizons in horizons:
  rolling_averages = sp500.rolling(horizons).mean()

  ratio_column = f"Close_Ratio_{horizons}"
  sp500[ratio_column] = sp500["Close"] / rolling_averages["Close"]

  trend_column = f"Trend_{horizons}"
  sp500[trend_column] = sp500.shift(1).rolling(horizons).sum()["Target"]

  new_predictors.append(ratio_column)
  new_predictors.append(trend_column)

sp500 = sp500.dropna()
sp500

model = RandomForestClassifier(n_estimators=888, min_samples_split=50, random_state=1)

def predict(train, test, predictors, model):
    model.fit(train[predictors], train["Target"])
    preds = model.predict(test[predictors])
    preds[preds>= .8]= 1
    preds[preds< .8]= 0
    preds = pd.Series(preds, index=test.index, name="Predictions")
    combined = pd.concat([test["Target"], preds], axis=1)
    return combined

predictions = backtest(sp500, model, new_predictors)

predictions['Predictions'].value_counts()

precision_score(predictions['Target'], predictions['Predictions'])



combined = pd.concat([test["Target"], preds], axis=1)
combined.plot()

"""time series data nm historical prices"""